{"version":3,"sources":["persistence/contacts.idb.ts","persistence/user.idb.ts","components/homescreen/homescreen.tsx","components/personal/personal.tsx","serviceWorker.ts","components/contacts/contacts.tsx","components/sidenav/sidenav.tsx","index.tsx"],"names":["openDatabaseConnection","a","openDB","upgrade","db","createObjectStore","keyPath","autoIncrement","createIndex","saveContact","contact","then","add","close","findAllContacts","data","getAllFromIndex","getUser","getAll","shift","Homescreen","useState","scannedQrCode","setScannedQrCode","personalQrCode","setPersonalQrCode","readerActive","setReaderActive","useEffect","user","JSON","stringify","Card","className","CardContent","onScan","parse","date","Date","style","width","value","size","CardActions","Button","onClick","variant","color","fullWidth","endIcon","elevation","severity","firstName","lastName","Personal","id","street","postal","city","phone","setUser","handleChange","key","handleSave","saveUser","put","updateUser","Grid","container","spacing","item","xs","TextField","onInput","e","target","label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Contacts","contacts","setContacts","List","map","index","Fragment","ListItem","ListItemIcon","ListItemText","primary","dayjs","format","Divider","Sidenav","drawerOpen","setDrawerOpen","Drawer","anchor","open","onClose","button","App","history","useHistory","setValue","AppBar","position","Toolbar","IconButton","edge","Typography","exact","path","to","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","push","icon","ReactDOM","render","basename","process","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.900692c1.chunk.js","sourcesContent":["import { Contact } from '../model/contact.model'\nimport { openDB } from 'idb/with-async-ittr.js'\n\n// Create a database connection and return it\nconst openDatabaseConnection = async () => {\nreturn await openDB('Contacts', 1, {\n  upgrade(db) {\n    const store = db.createObjectStore('contacts', {\n      keyPath: 'id',\n      autoIncrement: true,\n    });\n    store.createIndex('date', 'date');\n  },\n});\n}\n\n// Add a contact:\nexport const saveContact = async (contact: Contact) => {\nopenDatabaseConnection()\n  .then(db => {\n    db.add('contacts', contact)\n    db.close()\n  })\n}\n\n// Get all the contacts in date order:\nexport const findAllContacts = async () => {\nreturn openDatabaseConnection()\n  .then(db => {\n    const data = db.getAllFromIndex('contacts', 'date')\n    db.close()\n    return data\n  })\n}\n","import { User } from '../model/user.model'\nimport { openDB } from 'idb/with-async-ittr.js'\n\n// Create a database connection and return it\nconst openDatabaseConnection = async () => {\n  return await openDB('User', 1, {\n    upgrade(db) {\n      const store = db.createObjectStore('user', {\n        keyPath: 'id',\n        autoIncrement: true,\n      });\n      store.createIndex('lastName', 'lastName');\n    },\n  });\n}\n\n// Add a user:\nexport const saveUser = (user: User) => {\n  openDatabaseConnection()\n    .then(db => {\n      db.add('user', user)\n      db.close()\n    })\n}\n\n// Update a user:\nexport const updateUser = (user: User) => {\n  openDatabaseConnection()\n    .then(db => {\n      db.put('user', user)\n      db.close()\n    })\n}\n\n// Get the user data:\nexport const getUser = () => {\n  return openDatabaseConnection()\n    .then(async db => {\n      const data = await db.getAll('user')\n      db.close()\n      return data.shift()\n    })\n}\n","import React, { useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport CropFree from '@material-ui/icons/CropFree'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport MuiAlert from '@material-ui/lab/Alert';\n// @ts-ignore\nimport QRCode from 'qrcode.react'\n// @ts-ignore\nimport QrReader from 'react-qr-reader'\nimport { User } from '../../model/user.model'\nimport \"./homescreen.scss\"\nimport {saveContact} from \"../../persistence/contacts.idb\";\nimport {Contact} from \"../../model/contact.model\";\nimport {getUser} from \"../../persistence/user.idb\";\n\nexport default function Homescreen() {\n  const [scannedQrCode, setScannedQrCode] = useState<User | null>(null)\n  const [personalQrCode, setPersonalQrCode] = useState<string | null>(null)\n  const [readerActive, setReaderActive] = useState<boolean>(false)\n\n  useEffect(() => {\n    getUser()\n      .then(user => {\n        setPersonalQrCode(JSON.stringify(user))\n      })\n  }, [])\n\n  const readQrCode = (data: string) => {\n    if (data) {\n      setScannedQrCode(JSON.parse(data) as User)\n      setReaderActive(false)\n      saveContact({\n        user: JSON.parse(data) as User,\n        date: new Date()\n      } as Contact)\n    }\n  }\n\n  return (\n    <main>\n      <Card className=\"card\">\n        <CardContent className=\"card-content\">\n          {readerActive &&\n            <QrReader\n              onScan={readQrCode}\n              style={{ width: '250px' }}\n            />\n          }\n          {(personalQrCode && !readerActive) &&\n            <QRCode value={personalQrCode}\n                    size={250} />\n          }\n        </CardContent>\n        <div className=\"card-text\">Dein persönlicher QR-Code</div>\n        <CardActions>\n          <Button onClick={() => setReaderActive(!readerActive)}\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth={true}\n            endIcon={<CropFree />}>\n            {!readerActive ? 'QR-Code Scannen' : 'Scannen abbrechen'}\n            </Button>\n        </CardActions>\n      </Card>\n      {scannedQrCode &&\n        <MuiAlert onClick={() => setScannedQrCode(null)}\n                  elevation={6}\n                  variant=\"filled\"\n                  severity=\"success\">\n          {`Scanned: ${scannedQrCode?.firstName} ${scannedQrCode?.lastName}`}\n        </MuiAlert>\n      }\n    </main>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport {getUser, saveUser, updateUser} from \"../../persistence/user.idb\";\nimport { User } from '../../model/user.model'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Save from '@material-ui/icons/Save'\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport './personal.scss'\n\nexport default function Personal() {\n  const [user, setUser] = useState<User>({\n    id: '',\n    firstName: '',\n    lastName: '',\n    street: '',\n    postal: '',\n    city: '',\n    phone: ''\n  } as User)\n\n  useEffect(() => {\n    getUser()\n      .then(user => {\n        setUser(user)\n      })\n  }, [])\n\n  const handleChange = (key: string, value: string) => {\n    setUser({\n      ...user,\n      [key]: [value]\n    })\n  }\n\n  const handleSave = () => {\n    if (user.id) {\n      saveUser(user)\n    } else {\n      updateUser(user)\n    }\n  }\n\n  return (\n    <main>\n      <Card className=\"personal-card\">\n        <form className=\"personal-form\">\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField value={user.firstName}\n                         onInput={e => handleChange(\"firstName\", (e.target as HTMLInputElement).value)}\n                         label=\"Vorname\"\n                         fullWidth />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField value={user.lastName}\n                         onInput={e => handleChange(\"lastName\", (e.target as HTMLInputElement).value)}\n                         label=\"Nachname\"\n                         fullWidth />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField value={user.street}\n                         onInput={e => handleChange(\"street\", (e.target as HTMLInputElement).value)}\n                         label=\"Straße\"\n                         fullWidth />\n            </Grid>\n            <Grid item xs={4}>\n              <TextField value={user.postal}\n                         onInput={e => handleChange(\"postal\", (e.target as HTMLInputElement).value)}\n                         label=\"Plz\" />\n            </Grid>\n            <Grid item xs={8}>\n              <TextField value={user.city}\n                         onInput={e => handleChange(\"city\", (e.target as HTMLInputElement).value)}\n                         label=\"Stadt\"\n                         fullWidth />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField value={user.phone}\n                         onInput={e => handleChange(\"phone\", (e.target as HTMLInputElement).value)}\n                         label=\"Telefonnummer\"\n                         fullWidth />\n            </Grid>\n          </Grid>\n          <br />\n          <CardActions>\n            <Button onClick={() => handleSave()}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth={true}\n                    endIcon={<Save />}>\n              Speichern\n            </Button>\n          </CardActions>\n        </form>\n      </Card>\n    </main>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport { Contact } from '../../model/contact.model';\nimport './contacts.scss'\nimport { findAllContacts } from '../../persistence/contacts.idb';\nimport dayjs from \"dayjs\";\n\nexport default function Contacts() {\n  const [contacts, setContacts] = useState<Contact[] | null>(null)\n\n  useEffect(() => {\n    findAllContacts()\n      .then(contacts => {\n        setContacts(contacts)\n      })\n  }, [])\n\n  return (\n    <main>\n      <Card className=\"contact-card\">\n        {contacts ? (\n            <List>\n              {(contacts || []).map((contact: Contact, index: number) => (\n                <React.Fragment key={index}>\n                  <ListItem>\n                    <ListItemIcon>\n                      <AccountCircle />\n                    </ListItemIcon>\n                    <ListItemText primary={`${contact?.user?.firstName} ${contact?.user?.lastName}`}/>\n                    <ListItemText className=\"list-item-prepend\" primary={`${dayjs(contact?.date).format('DD.MM.YYYY')}`} />\n                  </ListItem>\n                  <Divider/>\n                </React.Fragment>\n              ))}\n            </List>\n        ):(\n          <div className=\"contact-placeholder\">Bisher wurden keine Kontakte gescanned.</div>\n        )}\n      </Card>\n    </main>\n  )\n}\n","import React from 'react'\nimport Drawer from '@material-ui/core/Drawer'\nimport List from '@material-ui/core/List'\nimport Divider from '@material-ui/core/Divider'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport './sidenav.scss'\n\nexport default function Sidenav({drawerOpen, setDrawerOpen}: {drawerOpen: boolean; setDrawerOpen: (n: boolean) => void}) {\n  return (\n    <Drawer anchor={'left'} open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n      <div className=\"sidenav-container\">\n        <List>\n          <ListItem button>\n            <ListItemIcon>\n              <AccountCircle />\n            </ListItemIcon>\n            <ListItemText>\n              Login\n            </ListItemText>\n          </ListItem>\n          <Divider />\n          <ListItem button>\n            <ListItemIcon>\n              <FormatListBulletedIcon />\n            </ListItemIcon>\n            <ListItemText>\n              Gäste\n            </ListItemText>\n          </ListItem>\n        </List>\n      </div>\n    </Drawer>\n  )\n}\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport Homescreen from './components/homescreen/homescreen'\nimport Personal from './components/personal/personal'\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CropFree from '@material-ui/icons/CropFree'\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport SmsFailedRounded from '@material-ui/icons/SmsFailedRounded'\nimport * as serviceWorker from './serviceWorker'\nimport {useHistory, Route, Switch, Redirect, HashRouter, BrowserRouter} from 'react-router-dom'\nimport './index.scss'\nimport Contacts from './components/contacts/contacts';\nimport Sidenav from \"./components/sidenav/sidenav\";\nimport {IconButton} from \"@material-ui/core\";\n\nfunction App() {\n  const history = useHistory()\n  const [value, setValue] = useState<number>(0)\n  const [drawerOpen, setDrawerOpen] = useState(false)\n\n  return (\n    <div className=\"content-container\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={() => setDrawerOpen(!drawerOpen)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">\n              <b>QRona</b>\n              <SmsFailedRounded />\n            </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Sidenav drawerOpen={drawerOpen} setDrawerOpen={setDrawerOpen} />\n\n      <Switch>\n        <Route exact path={'/home'}>\n          <Homescreen />\n        </Route>\n        <Route exact path={'/personal'}>\n          <Personal />\n        </Route>\n        <Route exact path={'/contacts'}>\n          <Contacts />\n        </Route>\n        <Redirect to={'/home'} />\n      </Switch>\n\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => setValue(newValue)}\n        showLabels\n      >\n        <BottomNavigationAction label=\"Scannen\"\n                                onClick={() => history.push(\"/home\")}\n                                icon={<CropFree />} />\n        <BottomNavigationAction label=\"Daten\"\n                                onClick={() => history.push(\"/personal\")}\n                                icon={<AccountCircle />} />\n        <BottomNavigationAction label=\"Begegnungen\"\n                                onClick={() => history.push(\"/contacts\")}\n                                icon={<FormatListBulletedIcon />} />\n      </BottomNavigation>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}