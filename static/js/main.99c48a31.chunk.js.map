{"version":3,"sources":["persistence/indexed-db.ts","components/homescreen/homescreen.tsx","components/personal/personal.tsx","serviceWorker.ts","components/contacts/contacts.tsx","index.tsx"],"names":["database","a","openDB","upgrade","db","createObjectStore","keyPath","autoIncrement","createIndex","openDatabaseConnection","saveContact","contact","then","add","findAllContacts","getAllFromIndex","Homescreen","useState","user","setUser","personalQrCode","setPersonalQrCode","readerActive","setReaderActive","useEffect","userInformation","localStorage","getItem","Card","className","CardContent","onScan","data","JSON","parse","date","Date","style","width","value","size","CardActions","Button","onClick","variant","color","fullWidth","endIcon","elevation","severity","firstName","lastName","Personal","setFirstName","setLastName","street","setStreet","postal","setPostal","city","setCity","phone","setPhone","Grid","container","spacing","item","xs","TextField","onInput","e","target","label","setItem","stringify","Boolean","window","location","hostname","match","Contacts","contacts","setContacts","List","map","index","Fragment","key","ListItem","ListItemIcon","ListItemText","primary","dayjs","format","Divider","App","setValue","page","AppBar","position","Toolbar","Typography","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","icon","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qZAmBMA,EAfsB,uCAAG,sBAAAC,EAAA,sEAChBC,YAAO,WAAY,EAAG,CACjCC,QADiC,SACzBC,GAEQA,EAAGC,kBAAkB,WAAY,CAE7CC,QAAS,KAETC,eAAe,IAGXC,YAAY,OAAQ,WAXD,mFAAH,oDAeXC,GAIJC,EAAW,uCAAG,WAAOC,GAAP,SAAAV,EAAA,sEACnBD,EAASY,KAAT,uCAAc,WAAMR,GAAN,SAAAH,EAAA,+EAAYG,EAAGS,IAAI,WAAYF,IAA/B,2CAAd,uDADmB,2CAAH,sDAKXG,EAAe,uCAAG,sBAAAb,EAAA,sEAChBD,EAASY,KAAT,uCAAc,WAAMR,GAAN,SAAAH,EAAA,+EAAYG,EAAGW,gBAAgB,WAAY,SAA3C,2CAAd,uDADgB,mFAAH,qDCZb,SAASC,IAAc,IAAD,EACXC,mBAAsB,MADX,mBAC5BC,EAD4B,KACtBC,EADsB,OAESF,mBAAwB,MAFjC,mBAE5BG,EAF4B,KAEZC,EAFY,OAGKJ,oBAAkB,GAHvB,mBAG5BK,EAH4B,KAGdC,EAHc,KAKnCC,qBAAU,WACR,IAAMC,EAAkBC,aAAaC,QAAQ,mBAC7CN,EAAkBI,KACjB,IAaH,OACE,8BACE,kBAACG,EAAA,EAAD,CAAMC,UAAU,QACd,kBAACC,EAAA,EAAD,CAAaD,UAAU,gBACpBP,GACC,kBAAC,IAAD,CACES,OAjBO,SAACC,GACdA,IACFb,EAAQc,KAAKC,MAAMF,IACnBT,GAAgB,GAChBb,EAAY,CACVQ,KAAMe,KAAKC,MAAMF,GACjBG,KAAM,IAAIC,SAYJC,MAAO,CAAEC,MAAO,WAGlBlB,IAAmBE,GACnB,kBAAC,IAAD,CAAQiB,MAAOnB,EACPoB,KAAM,OAGlB,yBAAKX,UAAU,aAAf,gCACA,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMpB,GAAiBD,IACtCsB,QAAQ,YACRC,MAAM,UACNC,WAAW,EACXC,QAAS,kBAAC,IAAD,OACPzB,EAAmC,oBAApB,qBAItBJ,GACC,kBAAC,IAAD,CAAUyB,QAAS,kBAAMxB,EAAQ,OACvB6B,UAAW,EACXJ,QAAQ,SACRK,SAAS,WAHnB,mBAIe/B,EAAKgC,UAJpB,YAIiChC,EAAKiC,Y,6CC1D/B,SAASC,IAAY,IAAD,EACCnC,mBAAiB,IADlB,mBAC1BiC,EAD0B,KACfG,EADe,OAEDpC,mBAAiB,IAFhB,mBAE1BkC,EAF0B,KAEhBG,EAFgB,OAGLrC,mBAAiB,IAHZ,mBAG1BsC,EAH0B,KAGlBC,EAHkB,OAILvC,mBAAiB,IAJZ,mBAI1BwC,EAJ0B,KAIlBC,EAJkB,OAKTzC,mBAAiB,IALR,mBAK1B0C,EAL0B,KAKpBC,EALoB,OAMP3C,mBAAiB,IANV,mBAM1B4C,EAN0B,KAMnBC,EANmB,KAQjCtC,qBAAU,WACR,IAAMC,EAAkBC,aAAaC,QAAQ,mBACvCT,EAAae,KAAKC,MAAMT,GAAmB,MAEjD4B,EAAY,OAACnC,QAAD,IAACA,OAAD,EAACA,EAAMgC,WACnBI,EAAW,OAACpC,QAAD,IAACA,OAAD,EAACA,EAAMiC,UAClBK,EAAS,OAACtC,QAAD,IAACA,OAAD,EAACA,EAAMqC,QAChBG,EAAS,OAACxC,QAAD,IAACA,OAAD,EAACA,EAAMuC,QAChBG,EAAO,OAAC1C,QAAD,IAACA,OAAD,EAACA,EAAMyC,MACdG,EAAQ,OAAC5C,QAAD,IAACA,OAAD,EAACA,EAAM2C,SACd,IAQH,OACE,8BACE,kBAACjC,EAAA,EAAD,CAAMC,UAAU,iBACd,0BAAMA,UAAU,iBACd,kBAACkC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAW7B,MAAOW,EAAWmB,QAAS,SAACC,GAAD,OAAOjB,EAAciB,EAAEC,OAA4BhC,QAAQiC,MAAM,aAEzG,kBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAW7B,MAAOY,EAAUkB,QAAS,SAACC,GAAD,OAAOhB,EAAagB,EAAEC,OAA4BhC,QAAQiC,MAAM,WAAW1B,WAAS,KAE3H,kBAACiB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAW7B,MAAOgB,EAAQc,QAAS,SAACC,GAAD,OAAOd,EAAWc,EAAEC,OAA4BhC,QAAQiC,MAAM,YAAS1B,WAAS,KAErH,kBAACiB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAW7B,MAAOkB,EAAQY,QAAS,SAACC,GAAD,OAAOZ,EAAWY,EAAEC,OAA4BhC,QAAQiC,MAAM,SAEnG,kBAACT,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAW7B,MAAOoB,EAAMU,QAAS,SAACC,GAAD,OAAOV,EAASU,EAAEC,OAA4BhC,QAAQiC,MAAM,QAAQ1B,WAAS,KAEhH,kBAACiB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAW7B,MAAOsB,EAAOQ,QAAS,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,OAA4BhC,QAAQiC,MAAM,gBAAgB1B,WAAS,MAG5H,6BACA,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,WA/BzBjB,aAAa+C,QACX,kBACAxC,KAAKyC,UAAU,CAAExB,YAAWC,WAAUI,SAAQE,SAAQE,OAAME,WAAa,OA8B3DjB,QAAQ,YACRC,MAAM,UACNC,WAAW,EACXC,QAAS,kBAAC,IAAD,OAJjB,iB,mGClDQ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gFCLS,SAASC,IAAY,IAAD,EACD/D,mBAA2B,MAD1B,mBAC1BgE,EAD0B,KAChBC,EADgB,KAUjC,OAPA1D,qBAAU,WACRV,IACGF,MAAK,SAAAqE,GACJC,EAAYD,QAEf,IAGD,8BACE,kBAACrD,EAAA,EAAD,CAAMC,UAAU,gBACboD,EACG,kBAACE,EAAA,EAAD,MACIF,GAAY,IAAIG,KAAI,SAACzE,EAAkB0E,GAAnB,eACpB,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACnB,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcC,QAAO,iBAAKhF,QAAL,IAAKA,GAAL,UAAKA,EAASO,YAAd,aAAK,EAAegC,UAApB,mBAAiCvC,QAAjC,IAAiCA,GAAjC,UAAiCA,EAASO,YAA1C,aAAiC,EAAeiC,YACrE,kBAACuC,EAAA,EAAD,CAAc7D,UAAU,oBAAoB8D,QAAO,UAAKC,IAAK,OAACjF,QAAD,IAACA,OAAD,EAACA,EAASwB,MAAM0D,OAAO,kBAEtF,kBAACC,EAAA,EAAD,WAKR,yBAAKjE,UAAU,uBAAf,6CCzBV,SAASkE,IAAO,IAAD,EACa9E,mBAAiB,GAD9B,mBACNsB,EADM,KACCyD,EADD,KAGTC,EAAO,kBAACjF,EAAD,MACX,OAAOuB,GACL,KAAK,EACH0D,EAAO,kBAACjF,EAAD,MACP,MACF,KAAK,EACHiF,EAAO,kBAAC7C,EAAD,MACP,MACF,KAAK,EACH6C,EAAO,kBAACjB,EAAD,MACP,MACF,QACEiB,EAAO,kBAACjF,EAAD,MAGX,OACE,yBAAKa,UAAU,qBACb,kBAACqE,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYzD,QAAQ,MAClB,oCACA,kBAAC,IAAD,SAKLqD,EAED,kBAACK,EAAA,EAAD,CACE/D,MAAOA,EACPgE,SAAU,SAACC,EAAOC,GAChBT,EAASS,IAEXC,YAAU,GAEV,kBAACC,EAAA,EAAD,CAAwBnC,MAAM,UAAUoC,KAAM,kBAAC,IAAD,QAC9C,kBAACD,EAAA,EAAD,CAAwBnC,MAAM,QAAQoC,KAAM,kBAAC,IAAD,QAC5C,kBAACD,EAAA,EAAD,CAAwBnC,MAAM,cAAcoC,KAAM,kBAAC,IAAD,UAM1DC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAChB,EAAD,OAEFiB,SAASC,eAAe,SFwEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxG,MAAK,SAAAyG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99c48a31.chunk.js","sourcesContent":["import { Contact } from '../model/contact.model';\nimport { openDB } from 'idb/with-async-ittr.js';\n\n// @ts-ignore\nconst openDatabaseConnection = async () => {\n  return await openDB('Contacts', 1, {\n    upgrade(db) {\n      // Create a store of objects\n      const store = db.createObjectStore('contacts', {\n        // The 'id' property of the object will be the key.\n        keyPath: 'id',\n        // If it isn't explicitly set, create a value by auto incrementing.\n        autoIncrement: true,\n      });\n      // Create an index on the 'date' property of the objects.\n      store.createIndex('date', 'date');\n    },\n  });\n}\nconst database = openDatabaseConnection()\n\n\n// Add a contact:\nexport const saveContact = async (contact: Contact) => {\n  await database.then(async db => db.add('contacts', contact))\n}\n\n// Get all the contacts in date order:\nexport const findAllContacts = async () => {\n  return await database.then(async db => db.getAllFromIndex('contacts', 'date'))\n}\n","import React, { useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport CropFree from '@material-ui/icons/CropFree'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport MuiAlert from '@material-ui/lab/Alert';\n// @ts-ignore\nimport QRCode from 'qrcode.react'\n// @ts-ignore\nimport QrReader from 'react-qr-reader'\nimport { User } from '../../model/user.model'\nimport \"./homescreen.scss\"\nimport {saveContact} from \"../../persistence/indexed-db\";\nimport {Contact} from \"../../model/contact.model\";\n\nexport default function Homescreen() {\n  const [user, setUser] = useState<User | null>(null)\n  const [personalQrCode, setPersonalQrCode] = useState<string | null>(null)\n  const [readerActive, setReaderActive] = useState<boolean>(false)\n\n  useEffect(() => {\n    const userInformation = localStorage.getItem(\"userInformation\")\n    setPersonalQrCode(userInformation)\n  }, [])\n\n  const readQrCode = (data: string) => {\n    if (data) {\n      setUser(JSON.parse(data) as User)\n      setReaderActive(false)\n      saveContact({\n        user: JSON.parse(data) as User,\n        date: new Date()\n      } as Contact)\n    }\n  }\n\n  return (\n    <main>\n      <Card className=\"card\">\n        <CardContent className=\"card-content\">\n          {readerActive &&\n            <QrReader\n              onScan={readQrCode}\n              style={{ width: '250px' }}\n            />\n          }\n          {(personalQrCode && !readerActive) &&\n            <QRCode value={personalQrCode}\n                    size={250} />\n          }\n        </CardContent>\n        <div className=\"card-text\">Dein persönlicher QR-Code</div>\n        <CardActions>\n          <Button onClick={() => setReaderActive(!readerActive)}\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth={true}\n            endIcon={<CropFree />}>\n            {!readerActive ? 'QR-Code Scannen' : 'Scannen abbrechen'}\n            </Button>\n        </CardActions>\n      </Card>\n      {user &&\n        <MuiAlert onClick={() => setUser(null)}\n                  elevation={6}\n                  variant=\"filled\"\n                  severity=\"success\">\n          {`Scanned: ${user.firstName} ${user.lastName}`}\n        </MuiAlert>\n      }\n    </main>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Save from '@material-ui/icons/Save'\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { User } from '../../model/user.model'\nimport './personal.scss'\n\nexport default function Personal() {\n  const [firstName, setFirstName] = useState<string>('')\n  const [lastName, setLastName] = useState<string>('')\n  const [street, setStreet] = useState<string>('')\n  const [postal, setPostal] = useState<string>('')\n  const [city, setCity] = useState<string>('')\n  const [phone, setPhone] = useState<string>('')\n\n  useEffect(() => {\n    const userInformation = localStorage.getItem('userInformation')\n    const user: User = JSON.parse(userInformation || \"{}\")\n\n    setFirstName(user?.firstName)\n    setLastName(user?.lastName)\n    setStreet(user?.street)\n    setPostal(user?.postal)\n    setCity(user?.city)\n    setPhone(user?.phone)\n  }, [])\n\n  const saveUser = () => {\n    localStorage.setItem(\n      'userInformation',\n      JSON.stringify({ firstName, lastName, street, postal, city, phone })  || '{}')\n  }\n\n  return (\n    <main>\n      <Card className=\"personal-card\">\n        <form className=\"personal-form\">\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField value={firstName} onInput={(e) => setFirstName((e.target as HTMLInputElement).value)} label=\"Vorname\" />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField value={lastName} onInput={(e) => setLastName((e.target as HTMLInputElement).value)} label=\"Nachname\" fullWidth />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField value={street} onInput={(e) => setStreet((e.target as HTMLInputElement).value)} label=\"Straße\" fullWidth />\n            </Grid>\n            <Grid item xs={4}>\n              <TextField value={postal} onInput={(e) => setPostal((e.target as HTMLInputElement).value)} label=\"Plz\" />\n            </Grid>\n            <Grid item xs={8}>\n              <TextField value={city} onInput={(e) => setCity((e.target as HTMLInputElement).value)} label=\"Stadt\" fullWidth />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField value={phone} onInput={(e) => setPhone((e.target as HTMLInputElement).value)} label=\"Telefonnummer\" fullWidth />\n            </Grid>\n          </Grid>\n          <br />\n          <CardActions>\n            <Button onClick={() => saveUser()}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth={true}\n                    endIcon={<Save />}>\n              Speichern\n            </Button>\n          </CardActions>\n        </form>\n      </Card>\n    </main>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport Card from '@material-ui/core/Card';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport { Contact } from '../../model/contact.model';\nimport './contacts.scss'\nimport { findAllContacts } from '../../persistence/indexed-db';\nimport dayjs from \"dayjs\";\n\nexport default function Contacts() {\n  const [contacts, setContacts] = useState<Contact[] | null>(null)\n\n  useEffect(() => {\n    findAllContacts()\n      .then(contacts => {\n        setContacts(contacts)\n      })\n  }, [])\n\n  return (\n    <main>\n      <Card className=\"contact-card\">\n        {contacts ? (\n            <List>\n              {(contacts || []).map((contact: Contact, index: number) => (\n                <React.Fragment key={index}>\n                  <ListItem>\n                    <ListItemIcon>\n                      <AccountCircle />\n                    </ListItemIcon>\n                    <ListItemText primary={`${contact?.user?.firstName} ${contact?.user?.lastName}`}/>\n                    <ListItemText className=\"list-item-prepend\" primary={`${dayjs(contact?.date).format('DD.MM.YYYY')}`} />\n                  </ListItem>\n                  <Divider/>\n                </React.Fragment>\n              ))}\n            </List>\n        ):(\n          <div className=\"contact-placeholder\">Bisher wurden keine Kontakte gescanned.</div>\n        )}\n      </Card>\n    </main>\n  )\n}\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport Homescreen from './components/homescreen/homescreen'\nimport Personal from './components/personal/personal'\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CropFree from '@material-ui/icons/CropFree'\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport SmsFailedRounded from '@material-ui/icons/SmsFailedRounded'\nimport * as serviceWorker from './serviceWorker'\nimport './index.scss'\nimport Contacts from './components/contacts/contacts';\n\nfunction App() {\n  const [value, setValue] = useState<number>(0)\n\n  let page = <Homescreen />\n  switch(value) {\n    case 0:\n      page = <Homescreen />\n      break\n    case 1:\n      page = <Personal />\n      break\n    case 2:\n      page = <Contacts />\n      break\n    default:\n      page = <Homescreen />\n  }\n\n  return (\n    <div className=\"content-container\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            <b>Qrona</b>\n            <SmsFailedRounded />\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {page}\n\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        showLabels\n      >\n        <BottomNavigationAction label=\"Scannen\" icon={<CropFree />} />\n        <BottomNavigationAction label=\"Daten\" icon={<AccountCircle />} />\n        <BottomNavigationAction label=\"Begegnungen\" icon={<FormatListBulletedIcon />} />\n      </BottomNavigation>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}