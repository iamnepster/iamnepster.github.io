{"version":3,"sources":["../node_modules/@ionic/pwa-elements/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","components/homescreen/homescreen.tsx","components/personal/personal.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Homescreen","useState","data","setData","readerActive","setReaderActive","user","setUser","useEffect","defineCustomElements","window","userInformation","localStorage","getItem","Card","className","CardContent","onScan","console","log","style","width","value","size","CardActions","Button","onClick","variant","color","fullWidth","endIcon","Personal","firstName","setFirstName","lastName","setLastName","street","setStreet","postal","setPostal","city","setCity","phone","setPhone","JSON","parse","Grid","container","spacing","item","xs","TextField","onInput","target","label","setItem","stringify","Boolean","location","hostname","match","App","setValue","AppBar","position","Toolbar","Typography","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","icon","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbbf443b.chunk.js","sourcesContent":["var map = {\n\t\"./pwa-action-sheet.entry.js\": [\n\t\t88,\n\t\t6\n\t],\n\t\"./pwa-camera-modal-instance.entry.js\": [\n\t\t89,\n\t\t7\n\t],\n\t\"./pwa-camera-modal.entry.js\": [\n\t\t90,\n\t\t8\n\t],\n\t\"./pwa-camera.entry.js\": [\n\t\t91,\n\t\t9\n\t],\n\t\"./pwa-toast.entry.js\": [\n\t\t92,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 67;\nmodule.exports = webpackAsyncContext;","import React, { useState, useEffect } from 'react'\nimport Button from '@material-ui/core/Button';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\nimport { defineCustomElements } from '@ionic/pwa-elements/loader'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n// @ts-ignore\nimport QRCode from 'qrcode.react'\n// @ts-ignore\nimport QrReader from 'react-qr-reader'\nimport \"./homescreen.scss\"\n\nexport default function Homescreen() {\n  const [data, setData] = useState<string | undefined>('')\n  const [readerActive, setReaderActive] = useState<boolean>(false)\n  const [user, setUser] = useState<string | null>('')\n\n  useEffect(() => {\n    defineCustomElements(window)\n    const userInformation = localStorage.getItem(\"userInformation\")\n    setUser(userInformation)\n  }, [])\n\n  const readQrCode = (data: string) => {\n    setData(data)\n    if (data) {\n      setReaderActive(false)\n      console.log(\"Data:\" + data)\n    }\n  }\n\n  return (\n    <main>\n      <Card className=\"card\">\n        <CardContent className=\"card-content\">\n          {readerActive ? (\n            <QrReader\n              onScan={readQrCode}\n              style={{ width: '250px' }}\n            />\n          ):(\n            <QRCode value={user} size={250} />\n          )}\n        </CardContent>\n        <div className=\"card-text\">Dein persönlicher QR-Code</div>\n        <CardActions>\n          <Button onClick={() => setReaderActive(!readerActive)}\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth={true}\n            endIcon={<PhotoCamera />}>\n            {!readerActive ? 'QR-Code Scannen' : 'Scannen abbrechen'}\n            </Button>\n            {data || ''}\n        </CardActions>\n      </Card>\n    </main>\n  )\n}","import React, {useState, useEffect} from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Lock from '@material-ui/icons/Lock'\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { User } from '../model/user.model'\n\nexport default function Personal() {\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [street, setStreet] = useState('')\n  const [postal, setPostal] = useState('')\n  const [city, setCity] = useState('')\n  const [phone, setPhone] = useState('')\n\n  useEffect(() => {\n    const userInformation = localStorage.getItem('userInformation')\n    const user: User = JSON.parse(userInformation || \"{}\")\n\n    setFirstName(user?.firstName)\n    setLastName(user?.lastName)\n    setStreet(user?.street)\n    setPostal(user?.postal)\n    setCity(user?.city)\n    setPhone(user?.phone)\n  }, [])\n\n  const saveUser = () => {\n    localStorage.setItem(\n      'userInformation',\n      JSON.stringify({ firstName, lastName, street, postal, city, phone })  || '{}')\n  }\n\n  return (\n    <main>\n      <Card className=\"card\">\n        <form>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField value={firstName} onInput={(e) => setFirstName((e.target as HTMLInputElement).value)} label=\"Vorname\" />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField value={lastName} onInput={(e) => setLastName((e.target as HTMLInputElement).value)} label=\"Nachname\" />\n            </Grid>\n          </Grid>\n            <TextField value={street} onInput={(e) => setStreet((e.target as HTMLInputElement).value)} label=\"Straße\" fullWidth />\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <TextField value={postal} onInput={(e) => setPostal((e.target as HTMLInputElement).value)} label=\"Plz\" />\n            </Grid>\n            <Grid item xs={8}>\n              <TextField value={city} onInput={(e) => setCity((e.target as HTMLInputElement).value)} label=\"City\" />\n            </Grid>\n          </Grid>\n          <br />\n          <CardActions> <Button onClick={() => saveUser()}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth={true}\n                    endIcon={<Lock />}>\n              Speichern\n            </Button>\n          </CardActions>\n        </form>\n      </Card>\n    </main>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport Homescreen from './components/homescreen/homescreen'\nimport Personal from './components/personal/personal'\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport * as serviceWorker from './serviceWorker'\nimport './index.scss'\n\nfunction App() {\n  const [value, setValue] = useState<number>(0)\n\n  return (\n    <div className=\"content-container\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            GastroQR\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {value === 0 ? (\n        <Homescreen />\n      ):(\n        <Personal />\n      )}\n\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        showLabels\n      >\n        <BottomNavigationAction label=\"Scannen\" icon={<PhotoCamera />} />\n        <BottomNavigationAction label=\"Daten\" icon={<AccountCircle />} />\n      </BottomNavigation>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}